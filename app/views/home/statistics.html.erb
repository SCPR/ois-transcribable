<div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <ol class="breadcrumb">
            <li><%= link_to 'Home', controller: :home, action: :index %></li>
            <li id="scope"></li>
        </ol>
    </div>
</div>
<div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <p>This tool provides a series of true/false filters that allows you to explore officer involved shooting data we have transcribed. Currently the data is based on letters filed by district attorney's in the relevant county. This data does not purport to show the total number of police shootings.</p>
        <p>Use any combination of filters to ask questions of the data, see the results by year, and get links to the cases relevant to your query. <strong>For example</strong>: Lets say I wanted to see all <em>Fatal incidents</em> in which the <em>Person Was Unarmed</em> and there were <em>Multiple Officers Involved</em>. Well, you would check the <a id="demo-filters" href="javascript:void(0)">appropriate boxes</a>.</p>
        <p>You can also download the full relational database as a <%= link_to 'json file', all_json_data_path(format: :json) %> or <%= link_to 'a csv file', all_csv_data_path(format: :csv) %>.</p>
    </div>
</div>

<div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="data-filters"></div>
    </div>
</div>

<script>
    (function(){

        window.App = {
            Models: {},
            Collections: {},
            Views: {},
            Router: {}
        };

        _.templateSettings = {
            interpolate: /\<\@\=(.+?)\@\>/gim,
            evaluate: /\<\@(.+?)\@\>/gim
        };

        window.template = function(id){
            return _.template( $('#' + id).html());
        };

        // helper functions
        window.percentify = function(value){
            var value = value * 100
            return parseFloat(value.toFixed(2));
        };

        window.create_groups = function(object, key){
            var output = object.groupBy(function(model){
                return model.get(key);
            });
            return output;
        };

        window.toFixedPercent = function(part, whole){
            var targetValue = part / whole;
            var decimal = parseFloat(targetValue);
            return percentify(decimal);
        };

        window.addCommas = function(nStr){
            nStr += "";
            x = nStr.split(".");
            x1 = x[0];
            x2 = x.length > 1 ? "." + x[1] : "";
                var rgx = /(\d+)(\d{3})/;
                    while (rgx.test(x1)) {
                        x1 = x1.replace(rgx, "$1" + "," + "$2");
                    }
                return x1 + x2;
        };

        window.ifEmptyStringForTotal = function(value){
            var result;
            if (value === ""){
                result = "Total not available";
            } else {
                result = window.addCommas(value);
            }
            return result;
        };

        window.string_equals_string = function(comparison, input){
            var result;
            if (input === comparison){
                result = true;
            } else {
                result = false;
            }
            return result;
        };

        window.parse_record_creation = function(date_time){
            if (Date.parse(date_time) <= Date.parse("2015-11-30")){
                output = true;
            } else {
                output = false;
            }
            return output
        };

        window.parse_year = function(date_time){
            var output = moment(date_time).locale("en").format("YYYY");
            output = parseInt(output);
            return output
        };

        window.parse_month_of_year = function(date_time){
            var output = moment(date_time).locale("en").format("MMM");
            return output
        };

        window.parse_day_of_week = function(date_time){
            var output = moment(date_time).locale("en").format("dddd");
            return output
        };

        window.parse_time_of_day = function(date_time){
            var output;
            var moment_date = moment.utc(date_time).format("HH:mm:ss");
            var comparison_date = "2011-01-01 " + moment_date;
            if (Date.parse(comparison_date) >= Date.parse("2011-01-01 00:00:00") && Date.parse(comparison_date) <= Date.parse("2011-01-01 06:00:00")){
                output = "_midnight_to_6_am";
            } else if (Date.parse(comparison_date) >= Date.parse("2011-01-01 06:01:00") && Date.parse(comparison_date) <= Date.parse("2011-01-01 12:00:00")){
                output = "_6_am_to_noon";
            } else if (Date.parse(comparison_date) >= Date.parse("2011-01-01 12:01:00") && Date.parse(comparison_date) <= Date.parse("2011-01-01 18:00:00")){
                output = "_noon_to_6_pm";
            } else if (Date.parse(comparison_date) >= Date.parse("2011-01-01 18:01:00") && Date.parse(comparison_date) <= Date.parse("2011-01-01 23:59:59")){
                output = "_6_pm_to_midnight";
            } else {
                output = "outlier";
            };
            return output;
        };

        window.comma_values_to_array = function(comma_string){
            comma_string = comma_string.replace(/, /g, ",")
            var array_of_strings = comma_string.split(",");
            return array_of_strings;
        };

        window.create_models_from_comma_separated = function(array){
            var counts = {};
            _.each(array, function(value){
                counts[value] = counts[value] ? counts[value] + 1 : 1;
            });
            var array_of_models = [];
            _.each(counts, function(value, key, obj){
                var output = {
                    name: key.replace(/^\s+|\s+$/gm, ""),
                    quantity: value
                };
                array_of_models.push(output);
            });
            return array_of_models;
        };

        String.prototype.truncateToGraf = function(){
            var lengthLimit = 900;
            if (this.length > lengthLimit){
                return this.substring(0, lengthLimit) + " ... ";
            } else {
                return this;
            }
        };

        String.prototype.toProperCase = function(){
            return this.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
        };

        window.slugify = function(text){
            return text.toString().toLowerCase()
            .replace(/\s+/g, '-')           // Replace spaces with -
            .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
            .replace(/\-\-+/g, '-')         // Replace multiple - with single -
            .replace(/^-+/, '')             // Trim - from start of text
            .replace(/-+$/, '');            // Trim - from end of text
        };

        App.Models.Person = Backbone.Model.extend({
            defaults: {
                id: null,
                created_at: null,
                updated_at: null,
                person_name: null,
                district_attorney_file_number: null,
                incident_url: null,
                person_weapon: null,
                person_weapon_specific: null,
                reason_for_shooting: null,
                person_place_of_death: null,
                person_first_name: null,
                person_last_name: null,
                person_ethnicity: null,
                person_gender: null,
                person_manner: null,
                person_cause_a: null,
                person_cause_b: null,
                person_cause_c: null,
                person_cause_d: null,
                person_other_significant_causes: null,
                person_investigator: null,
                person_dme: null,
                person_toxicology_status: null,
                person_media_reports_link: null,
                person_case_status: null,
                person_body_status: null,
                person_age: null,
                in_custody_record_key_number: null,
                coroner_case_number: null,
                year_of_incident: null,
                coroner_police_agency: null,
                drugs: null,
                person_criminal_case_file_number: null,
                person_charges_filed: null,
                notes: null,
                person_signs_of_impairment: null,
                marijuana_alone: null,
                case_doubled_up: null,
                person_shot: null,
                person_killed: null,
                person_wounded: null,
                armed_with_firearm: null,
                armed_with_weapon: null,
                used_vehicle_as_weapon: null,
                person_reached_for_waistband: null,
                person_arrested: null,
                person_fled_by_foot_or_vehicle: null,
                person_signs_of_gang_affiliation: null,
                person_ignored_officer_commands: null,
                person_weapon_recovered: null,
                person_threatened_officer_with_weapon: null,
                person_signs_of_mental_illness: null,
                person_fired_gun_at_officer: null,
                person_pointed_gun_at_officer: null,
                person_shot_in_back: null,
                person_shot_in_head: null,
                person_unarmed: null,
                person_armed: null,
                person_hid_hands_from_officer: null,
                person_grabbed_for_officers_weapon_holster: null,
                law_enforcement_related: null,
                officer_involved: null,
                in_custody: null,
                person_date_of_birth: null,
                person_date_of_death: null,
            },
        });

        App.Collections.People = Backbone.Collection.extend({
            model: App.Models.Person,
            comparator: function(model) {
                return model.get("district_attorney_file_number");
            },
            url: null,
        });

        App.Models.CommaSeparated = Backbone.Model.extend({
            defaults: {
                name: null,
                quantity: null,
            },
        });

        App.Collections.CommaSeparateds = Backbone.Collection.extend({
            model: App.Models.CommaSeparated,
            comparator: function(model) {
                return -model.get("quantity");
            }
        });

        App.Router = Backbone.Router.extend({

            routes: {
                ":scope(/)": "fetchData",
            },

            fetchData: function(scope){
                $("li#scope").html(scope + " statistics");
                var _this = this;
                var people = new App.Collections.People();
                people.url = "/people/data/" + scope;
                people.fetch({
                    async: false
                });
                var checkExist = setInterval(function() {
                    if (people.length > 0){
                        clearInterval(checkExist);
                        _this.renderApplicationVisuals(people);
                    }
                }, 500);
            },

            renderApplicationVisuals: function(people){
                if (this.applicationVisuals){
                    this.applicationVisuals.remove();
                };
                people.forEach(function(model, index){
                    var _this = model.attributes;
                    _.extend(_this, _this.incident);
                    model.unset("incident");
                });
                this.applicationVisuals = new App.Views.ApplicationVisuals({
                    total_people: people
                });
                return this.applicationVisuals;
            },
        });

        App.Views.ApplicationVisuals = Backbone.View.extend({

            el: ".data-filters",

            initialize: function(object){
                this.view_object = object;
                this.view_object.template = template("my_template");
                this.view_object.relevant_people = this.view_object.total_people;
                this.view_object = this.calculate_model_attributes(this.view_object);
                this.view_object.filters = [{
                    type: "people",
                    proper: "Top Line",
                    radio_buttons: [],
                    checkboxes: [
                        {opt: "Was Use Of Force Fatal", opt_field: "person_killed"},
                        {opt: "Was Use Of Force Non-Fatal", opt_field: "person_wounded"},
                        {opt: "Person Was Armed", opt_field: "person_armed"},
                        {opt: "Person Was Unarmed", opt_field: "person_unarmed"},
                        {opt: "Neither Armed or Unarmed", opt_field: "not_armed_or_unarmed"},
                        {opt: "Person Armed With Firearm/Gun", opt_field: "armed_with_firearm"},
                        {opt: "Person Armed With Other Weapon", opt_field: "armed_with_weapon"},
                        {opt: "Person Grabbed Officers Weapon", opt_field: "person_grabbed_for_officers_weapon_holster"},
                        {opt: "Person Threatened With Weapon", opt_field: "person_threatened_officer_with_weapon"},
                        {opt: "Person Pointed Firearm", opt_field: "person_pointed_gun_at_officer"},
                        {opt: "Person Fired Firearm", opt_field: "person_fired_gun_at_officer"},
                        {opt: "Person Weapon Recovered", opt_field: "person_weapon_recovered"},
                        {opt: "Person Ignored Officer Commands", opt_field: "person_ignored_officer_commands"},
                        {opt: "Reached for Waistband/Pants", opt_field: "person_reached_for_waistband"},
                        {opt: "Officer Couldn't See Persons Hands", opt_field: "person_hid_hands_from_officer"},
                        {opt: "Signs of Drug/Alcohol Impairment", opt_field: "person_signs_of_impairment"},
                        {opt: "Signs of Mental Illness", opt_field: "person_signs_of_mental_illness"},
                        {opt: "Officer Claimed Vehicle Used as Weapon", opt_field: "used_vehicle_as_weapon"},
                        {opt: "Person Shot In Back", opt_field: "person_shot_in_back"},
                        {opt: "Person Shot In Head", opt_field: "person_shot_in_head"},
                        {opt: "Pursuit Occurred", opt_field: "person_fled_by_foot_or_vehicle"},
                        {opt: "Person Arrested", opt_field: "person_arrested"},
                        {opt: "Person Identified As Gang Member", opt_field: "person_signs_of_gang_affiliation"},
                    ]
                }, {
                    type: "incidents",
                    proper: "Officer",
                    radio_buttons: [],
                    checkboxes: [
                        {opt: "Officer Self Defense", opt_field: "officer_self_defense"},
                        {opt: "Officer Defense Of Officers", opt_field: "officer_defense_of_officers"},
                        {opt: "Officer Defense Of Civillians", opt_field: "officer_defense_of_civillians"},
                        {opt: "Officer Responding to Call", opt_field: "officer_responding_to_call"},
                        {opt: "Officer On Routine Patrol", opt_field: "officer_routine_patrol"},
                        {opt: "Officer Serving Warrant", opt_field: "officer_serving_warrant"},
                        {opt: "Officer On Surveillance", opt_field: "officer_on_surveillance"},
                        {opt: "Officer On Undercover", opt_field: "officer_on_undercover"},
                        {opt: "Charges Filed Against Officer", opt_field: "officer_charges_filed"},
                        // {opt: "Deadly Force as First Response", opt_field: "deadly_force_as_first_calc"},
                        // {opt: "Multiple Civilians Shot", opt_field: "multiple_shot"},
                        // {opt: "Multiple Civilians Killed", opt_field: "multiple_killed"},
                    ]
                }, {
                    type: "incidents",
                    proper: "Response",
                    radio_buttons: [],
                    checkboxes: [
                        {opt: "Domestic Violence", opt_field: "domestic_violence"},
                        {opt: "General Disturbance", opt_field: "general_disturbance"},
                        {opt: "Implied Weapon Is Present", opt_field: "implied_weapon_is_present"},
                        {opt: "Lower Level Crime", opt_field: "lower_level_crime"},
                        {opt: "Serious Crime", opt_field: "serious_crime"},
                        {opt: "Suicidal", opt_field: "suicidal"},
                        {opt: "Suspicious Cop", opt_field: "suspicious_cop"},
                        {opt: "Traffic Violation", opt_field: "traffic_violation"},
                    ]
                }, {
                    type: "people",
                    proper: "Reasons",
                    radio_buttons: [],
                    checkboxes: [
                        {opt: "Attempted To Disarm Officer", opt_field: "attempted_to_disarm_officer"},
                        {opt: "Bystander In Shooting", opt_field: "bystander_in_shooting"},
                        {opt: "Led To Believe Was Armed", opt_field: "led_to_believe_was_armed"},
                        {opt: "Object Shooting", opt_field: "object_shooting"},
                        {opt: "Perception Shooting", opt_field: "perception_shooting"},
                        {opt: "Vehicle As Weapon", opt_field: "vehicle_as_weapon"},
                    ]
                }, {
                    type: "incidents",
                    proper: "Incident",
                    radio_buttons: [],
                    checkboxes: [
                        {opt: "Single Officer Shot", opt_field: "single_officer_calc"},
                        {opt: "Multiple Officers Fired Weapons", opt_field: "multiple_officers"},
                        // {opt: "Believed Person Was Armed", opt_field: "believed_person_armed"},
                        {opt: "Car Stop", opt_field: "car_stop"},
                        {opt: "Officer Injured", opt_field: "officer_injured"},
                        {opt: "Potential Civillian Video", opt_field: "potential_civillian_video"},
                        {opt: "Civilian Witnesses", opt_field: "civilian_witnesses"},
                    ]
                }, {
                    type: "incidents",
                    proper: "Time",
                    radio_buttons: [],
                    checkboxes: [
                        {opt: "Midnight to 6 a.m.", opt_field: "_midnight_to_6_am"},
                        {opt: "6 a.m. to Noon", opt_field: "_6_am_to_noon"},
                        {opt: "Noon to 6 p.m.", opt_field: "_noon_to_6_pm"},
                        {opt: "6 p.m. to midnight", opt_field: "_6_pm_to_midnight"},
                        {opt: "Sunday", opt_field: "sunday"},
                        {opt: "Monday", opt_field: "monday"},
                        {opt: "Tuesday", opt_field: "tuesday"},
                        {opt: "Wednesday", opt_field: "wednesday"},
                        {opt: "Thursday", opt_field: "thursday"},
                        {opt: "Friday", opt_field: "friday"},
                        {opt: "Saturday", opt_field: "saturday"},
                    ]
                }];

                var agency_filters = {
                    type: "incidents",
                    proper: "Agencies With More Than One Shooting",
                    radio_buttons: [],
                    checkboxes: [],
                };
                _.each(this.view_object.agencies, function(count, item){
                    var agency_object = {
                        opt: item + " (" + count + ")",
                        opt_field: window.slugify(item),
                        opt_count: count
                    };
                    if (count > 1){
                        agency_filters.checkboxes.push(agency_object);
                    };
                });
                agency_filters.checkboxes = _.sortBy(agency_filters.checkboxes, "opt_count").reverse();
                this.view_object.filters.push(agency_filters);

                var officer_filters = {
                    type: "incidents",
                    proper: "Officers With More Than One Shooting",
                    radio_buttons: [],
                    checkboxes: [],
                };
                _.each(this.view_object.officers, function(count, item){
                    var officer_object = {
                        opt: item + " (" + count + ")",
                        opt_field: window.slugify(item),
                        opt_count: count
                    };
                    if (count > 1){
                        officer_filters.checkboxes.push(officer_object);
                    };
                });
                officer_filters.checkboxes = _.sortBy(officer_filters.checkboxes, "opt_count").reverse();
                this.view_object.filters.push(officer_filters);

                var drug_filters = {
                    type: "people",
                    proper: "Presence of drugs",
                    radio_buttons: [],
                    checkboxes: [],
                };
                _.each(this.view_object.drugs, function(count, item){
                    var drug_object = {
                        opt: item + " (" + count + ")",
                        opt_field: window.slugify(item),
                        opt_count: count
                    };
                    if (count >= 1){
                        drug_filters.checkboxes.push(drug_object);
                    };
                });
                drug_filters.checkboxes = _.sortBy(drug_filters.checkboxes, "opt_count").reverse();
                this.view_object.filters.push(drug_filters);

                var grouped_filters = _.groupBy(this.view_object.filters, function(item){
                    return item.type;
                });
                this.view_object.filter_types = _.keys(grouped_filters)
                this.render();
            },

            calculate_model_attributes: function(view_object){
                view_object.genders = [];
                view_object.ethnicities = [];
                view_object.responses = [];
                view_object.reasons = [];
                view_object.drugs = [];
                view_object.agencies = [];
                view_object.officers = [];
                view_object.relevant_people.forEach(function(model, index){
                    var _this = model.attributes;
                    // create a year of incident measure
                    model.set("incident_year", parse_year(_this.date_of_incident));
                    // create a month of incident measure
                    model.set("incident_month", parse_month_of_year(_this.date_of_incident));
                    // create a day of the week measure
                    model.set("incident_day", parse_day_of_week(_this.date_of_incident));
                    if (_this.incident_day === "Sunday"){
                        model.set("sunday", true);
                        model.set("monday", false);
                        model.set("tuesday", false);
                        model.set("wednesday", false);
                        model.set("thursday", false);
                        model.set("friday", false);
                        model.set("saturday", false);
                    } else if (_this.incident_day === "Monday"){
                        model.set("sunday", false);
                        model.set("monday", true);
                        model.set("tuesday", false);
                        model.set("wednesday", false);
                        model.set("thursday", false);
                        model.set("friday", false);
                        model.set("saturday", false);
                    } else if (_this.incident_day === "Tuesday"){
                        model.set("sunday", false);
                        model.set("monday", false);
                        model.set("tuesday", true);
                        model.set("wednesday", false);
                        model.set("thursday", false);
                        model.set("friday", false);
                        model.set("saturday", false);
                    } else if (_this.incident_day === "Wednesday"){
                        model.set("sunday", false);
                        model.set("monday", false);
                        model.set("tuesday", false);
                        model.set("wednesday", true);
                        model.set("thursday", false);
                        model.set("friday", false);
                        model.set("saturday", false);
                    } else if (_this.incident_day === "Thursday"){
                        model.set("sunday", false);
                        model.set("monday", false);
                        model.set("tuesday", false);
                        model.set("wednesday", false);
                        model.set("thursday", true);
                        model.set("friday", false);
                        model.set("saturday", false);
                    } else if (_this.incident_day === "Friday"){
                        model.set("sunday", false);
                        model.set("monday", false);
                        model.set("tuesday", false);
                        model.set("wednesday", false);
                        model.set("thursday", false);
                        model.set("friday", true);
                        model.set("saturday", false);
                    } else if (_this.incident_day === "Saturday"){
                        model.set("sunday", false);
                        model.set("monday", false);
                        model.set("tuesday", false);
                        model.set("wednesday", false);
                        model.set("thursday", false);
                        model.set("friday", false);
                        model.set("saturday", true);
                    } else {
                        model.set("sunday", undefined);
                        model.set("monday", undefined);
                        model.set("tuesday", undefined);
                        model.set("wednesday", undefined);
                        model.set("thursday", undefined);
                        model.set("friday", undefined);
                        model.set("saturday", undefined);
                    };
                    // create a time of the day measure
                    model.set("time_of_day", parse_time_of_day(_this.date_of_incident));
                    if (_this.time_of_day === "_midnight_to_6_am"){
                        model.set("_midnight_to_6_am", true);
                        model.set("_6_am_to_noon", false);
                        model.set("_noon_to_6_pm", false);
                        model.set("_6_pm_to_midnight", false);
                    } else if (_this.time_of_day === "_6_am_to_noon"){
                        model.set("_midnight_to_6_am", false);
                        model.set("_6_am_to_noon", true);
                        model.set("_noon_to_6_pm", false);
                        model.set("_6_pm_to_midnight", false);
                    } else if (_this.time_of_day === "_noon_to_6_pm"){
                        model.set("_midnight_to_6_am", false);
                        model.set("_6_am_to_noon", false);
                        model.set("_noon_to_6_pm", true);
                        model.set("_6_pm_to_midnight", false);
                    } else if (_this.time_of_day === "_6_pm_to_midnight"){
                        model.set("_midnight_to_6_am", false);
                        model.set("_6_am_to_noon", false);
                        model.set("_noon_to_6_pm", false);
                        model.set("_6_pm_to_midnight", true);
                    } else {
                        model.set("_midnight_to_6_am", undefined);
                        model.set("_6_am_to_noon", undefined);
                        model.set("_noon_to_6_pm", undefined);
                        model.set("_6_pm_to_midnight", undefined);
                    };
                    /* set gender data */
                    if (_this.person_gender === "MALE"){
                        model.set("person_male", true);
                    } else if (_this.person_gender === "FEMALE"){
                        model.set("person_female", true);
                    } else if (_this.person_gender === null || _this.person_gender === "NULL"){
                        model.set("person_gender", "na-gender");
                        model.set("person_male", null);
                        model.set("person_female", null);
                    };
                    view_object.genders.push(_this.person_gender);
                    /* set ethnicity data */
                    if (_this.person_ethnicity === null || _this.person_ethnicity === "NULL"){
                        model.set("no_ethnicity", true);
                        model.set("person_ethnicity", "na-ethnicity");
                    };
                    if (_this.person_ethnicity === ""){
                        model.set("no_ethnicity", true);
                        model.set("person_ethnicity", "na-ethnicity");
                    };
                    if (_this.person_ethnicity === "HISPANIC/LATIN AMERICAN"){
                        model.set("no_ethnicity", false);
                        model.set("person_ethnicity", "latino");
                    };
                    if (_this.person_ethnicity === "MIDDLE EASTERN"){
                        model.set("no_ethnicity", false);
                        model.set("person_ethnicity", "mid-eastn");
                    };
                    if (_this.person_ethnicity === "PACIFIC ISLANDER"){
                        model.set("no_ethnicity", false);
                        model.set("person_ethnicity", "pacific-islander");
                    };
                    model.set("person_ethnicity", _this.person_ethnicity.toLowerCase());
                    model.set(_this.person_ethnicity, true);
                    view_object.ethnicities.push(_this.person_ethnicity);

                    /* set age data */
                    if (_this.person_age === undefined || _this.person_age === null|| _this.person_age === "NULL"){
                        model.set("age_ranges", "na-range");
                        model.set("person_age", "na-age");
                    } else {
                        var comparison_age = parseInt(_this.person_age);
                        if (comparison_age < 18){
                            model.set("age_ranges", "under_18");
                        } else if (comparison_age >= 18 && comparison_age <= 24){
                            model.set("age_ranges", "18_24");
                        } else if (comparison_age >= 25 && comparison_age <= 34){
                            model.set("age_ranges", "25_34");
                        } else if (comparison_age >= 35 && comparison_age <= 44){
                            model.set("age_ranges", "35_44");
                        } else if (comparison_age >= 45 && comparison_age <= 54){
                            model.set("age_ranges", "45_54");
                        } else if (comparison_age >= 55){
                            model.set("age_ranges", "55_over");
                        } else{
                            model.set("age_ranges", "na-range");
                        };
                    };

                    if (_this.district_attorney_county === "Los Angeles"){
                        model.set("original-scope", parse_record_creation(_this.created_at));
                    } else {
                        model.set("original-scope", false);
                    };

                    _this.district_attorney_county = window.slugify(_this.district_attorney_county);
                    model.set(_this.district_attorney_county, true);
                    window.comma_values_to_array(_this.officer_police_agency).forEach(function(value, index){
                        slug = window.slugify(value)
                        view_object.agencies.push(value)
                        model.set(slug, true);
                    });

                    window.comma_values_to_array(_this.officer_name_and_badge_number).forEach(function(value, index){
                        slug = window.slugify(value)
                        view_object.officers.push(value)
                        model.set(slug, true);
                    });

                    window.comma_values_to_array(_this.drugs).forEach(function(value, index){
                        if (value !== ""){
                            var output = value.toLowerCase();
                            if (output.indexOf("blood alcohol content") > 0){
                                output = "alcohol"
                            };
                            if (output === "cannabinoids"){
                                output = "marijuana"
                            }
                            if (output === "thc"){
                                output = "marijuana"
                            };
                            slug = window.slugify(output)
                            view_object.drugs.push(output)
                            model.set(slug, true);
                        };
                    });

                    if (_this.person_unarmed === null && _this.person_armed === null){
                        model.set("not_armed_or_unarmed", true);
                    };
                    if (_this.district_attorney_on_scene != null && _this.district_attorney_prepared_report != null){
                        model.set("da_the_same_calc", string_equals_string(_this.district_attorney_on_scene, _this.district_attorney_prepared_report));
                    } else {
                        model.set("da_the_same_calc", null);
                    };
                    if (_this.led_to_response_category === "domestic violence"){
                        model.set("led_to_response_category", "domestic_violence");
                    };
                    if (_this.led_to_response_category === "implied weapon is present"){
                        model.set("led_to_response_category", "implied_weapon_is_present");
                    };
                    if (_this.led_to_response_category === "shots fired"){
                        model.set("led_to_response_category", "implied_weapon_is_present");
                    };
                    if (_this.led_to_response_category === "lower-level crime"){
                        model.set("led_to_response_category", "lower_level_crime");
                    };
                    if (_this.led_to_response_category === "suicidal/wants to die"){
                        model.set("led_to_response_category", "suicidal");
                    };
                    if (_this.led_to_response_category === "violent/serious crime"){
                        model.set("led_to_response_category", "serious_crime");
                    };
                    if (_this.led_to_response_category === "general disturbance"){
                        model.set("led_to_response_category", "general_disturbance");
                    };
                    if (_this.led_to_response_category === "suspicious or inquisitive cop"){
                        model.set("led_to_response_category", "suspicious_cop");
                    };
                    if (_this.led_to_response_category != null){
                        _this.led_to_response_category = _this.led_to_response_category.replace(/ /g,"_");
                        model.set(_this.led_to_response_category, true);
                    };
                    view_object.responses.push(_this.led_to_response_category);
                    if (_this.reason_for_shooting === "null"){
                        model.set("reason_for_shooting", "undefined");
                    }
                    if (_this.reason_for_shooting === "NULL" || _this.reason_for_shooting === null){
                        _this.reason_for_shooting = "undefined";
                        model.set(_this.reason_for_shooting, true);
                    } else {
                        _this.reason_for_shooting = _this.reason_for_shooting.replace(/ /g,"_");
                        model.set(_this.reason_for_shooting, true);
                    };
                    view_object.reasons.push(_this.reason_for_shooting);
                });

                view_object.months = [
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Oct",
                    "Nov",
                    "Dec"
                ];

                view_object.days = [
                    "Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday"
                ];

                view_object.times = [
                    "_midnight_to_6_am",
                    "_6_am_to_noon",
                    "_noon_to_6_pm",
                    "_6_pm_to_midnight",
                ];

                view_object.age_ranges = [
                    "under_18",
                    "18_24",
                    "25_34",
                    "35_44",
                    "45_54",
                    "55_over",
                    "na"
                ];
                view_object.agencies = _.countBy(view_object.agencies, function(item){
                    return item;
                });
                view_object.officers = _.countBy(view_object.officers, function(item){
                    return item;
                });
                view_object.drugs = _.countBy(view_object.drugs, function(item){
                    return item;
                });
                view_object.responses = _.uniq(view_object.responses).sort();
                view_object.reasons = _.uniq(view_object.reasons).sort();
                view_object.years = _.uniq(view_object.relevant_people.pluck("incident_year")).sort();
                view_object.genders = _.uniq(view_object.genders).sort();
                view_object.ethnicities = _.uniq(view_object.ethnicities).sort();
                return view_object;
            },

            events: {
                "click [type='radio']": "construct_filtered_data",
                "click [type='checkbox']": "construct_filtered_data",
                "click #clear-filters": "clear_checkbox_filters",
                "click #demo-filters": "demo_filters"
            },

            render: function(){

                this.view_object.top_line_stats = {};

                this.view_object.top_line_stats["Fatal Shooting"] = this.view_object.relevant_people.where({
                    person_killed: true
                });

                this.view_object.top_line_stats["Non-Fatal Shooting"] = this.view_object.relevant_people.where({
                    person_wounded: true
                });

                this.view_object.top_line_stats["Unarmed Civilian"] = this.view_object.relevant_people.where({
                    person_unarmed: true
                });

                this.view_object.top_line_stats["Unarmed Civilian & Implied Weapon Is Present"] = this.view_object.relevant_people.where({
                        person_unarmed: true,
                        led_to_response_category: "implied_weapon_is_present"
                });

                this.view_object.top_line_stats["Armed Civilian"] = this.view_object.relevant_people.where({
                    person_armed: true
                });

                this.view_object.top_line_stats["Weapon Recovered From Civilian"] = this.view_object.relevant_people.where({
                    person_weapon_recovered: true
                });

                this.view_object.top_line_stats["Replica, Nonfunctional, Toy Or Blank Gun"] = this.view_object.relevant_people.where({
                        person_weapon: "replica, nonfunctional, toy or blank gun"
                });

                this.view_object.top_line_stats["Armed With Nonfirearm"] = this.view_object.relevant_people.where({
                    armed_with_weapon: true
                });

                this.view_object.top_line_stats["Armed With Firearm/Gun"] = this.view_object.relevant_people.where({
                    armed_with_firearm: true
                });

                this.view_object.top_line_stats["Civilian Pointed Firearm/Gun"] = this.view_object.relevant_people.where({
                        person_pointed_gun_at_officer: true
                });

                this.view_object.top_line_stats["Civilian Fired Firearm/Gun"] = this.view_object.relevant_people.where({
                    person_fired_gun_at_officer: true
                });

                this.view_object.top_line_stats["Civilian Pointed & Fired Firearm/Gun"] = this.view_object.relevant_people.where({
                        person_pointed_gun_at_officer: true,
                        person_fired_gun_at_officer: true
                });

                this.view_object.top_line_stats["Civilian Ignored Officer Commands"] = this.view_object.relevant_people.where({
                        person_ignored_officer_commands: true
                });

                this.view_object.top_line_stats["Civilian Reached for Waistband"] = this.view_object.relevant_people.where({
                        person_reached_for_waistband: true
                });

                this.view_object.top_line_stats["Officer Couldn't See Civilian's Hands"] = this.view_object.relevant_people.where({
                        person_hid_hands_from_officer: true
                });

                // ignored commands and demonstrated symptoms of intoxication
                this.view_object.top_line_stats["Civilian Ignored Commands/Symptoms Of Intoxication"] = this.view_object.relevant_people.where({
                        person_ignored_officer_commands: true,
                        person_signs_of_impairment: true
                });

                // ignored commands and demonstrated symptoms of mentally illness
                this.view_object.top_line_stats["Civilian Ignored Commands/Symptoms of Mental Illness"] = this.view_object.relevant_people.where({
                        person_ignored_officer_commands: true,
                        person_signs_of_mental_illness: true
                });

                // reaching for waistband and unarmed
                this.view_object.top_line_stats["Unarmed & Civilian Reached for Waistband"] = this.view_object.relevant_people.where({
                        person_unarmed: true,
                        person_reached_for_waistband: true
                });

                // mentally ill and unarmed
                this.view_object.top_line_stats["Unarmed & Symptoms of Mental Illness"] = this.view_object.relevant_people.where({
                        person_unarmed: true,
                        person_signs_of_mental_illness: true
                });


                this.view_object.top_line_stats["Civilian Used Vehicle As Weapon"] = this.view_object.relevant_people.where({
                        used_vehicle_as_weapon: true
                });

                this.view_object.top_line_stats["Foot Pursuit or Car Pursuit Occurred"] = this.view_object.relevant_people.where({
                        person_fled_by_foot_or_vehicle: true
                });

                this.view_object.obj = {};
                this.view_object.obj.filtered = {};
                this.view_object.obj.init = {};
                this.view_object.obj.init.people = this.view_object.relevant_people;
                this.view_object.obj.init.genders = create_groups(this.view_object.obj.init.people, "person_gender");
                this.view_object.obj.init.ethnicities = create_groups(this.view_object.obj.init.people, "person_ethnicity");
                this.view_object.obj.init.age_ranges = create_groups(this.view_object.obj.init.people, "age_ranges");
                this.view_object.obj.init.days = create_groups(this.view_object.obj.init.people, "incident_day");
                this.view_object.obj.init.months = create_groups(this.view_object.obj.init.people, "incident_month");
                this.view_object.obj.init.years = create_groups(this.view_object.obj.init.people, "incident_year");
                this.view_object.obj.init.times = create_groups(this.view_object.obj.init.people, "time_of_day");
                this.view_object.obj.init.responses = create_groups(this.view_object.obj.init.people, "led_to_response_category");
                this.view_object.obj.init.reasons = create_groups(this.view_object.obj.init.people, "reason_for_shooting");
                this.view_object.obj.total = this.view_object.obj.init.people.length;
                $(this.el).html(this.view_object.template(this.view_object));
                this.display_data(this.view_object.obj, true, "black");
            },

            display_data: function(obj, initial, color){
                $("td#all-people").html(this.view_object.obj.total);
                $("td#relevant-people").html(this.view_object.obj.total);
                if (initial === true){
                    this.chart_data(obj.init, this.view_object, color);
                } else {
                    this.chart_data(obj.filtered, this.view_object, color);
                };
            },

            chart_data: function(obj, main_obj, color){

                // display the overall figures
                var total = main_obj.total_people.length;
                var people_empty = _.isEmpty(obj.people.models);
                if (people_empty === false){
                    $("td#filtered-people").html(obj.people.length + " / " + total + "<br />" + percentify(obj.people.length / total) + "%");
                } else {
                    $("td#filtered-people").html("n/a" + "<br />" + "0.00%");
                    $("td#filtered-people").css({color: "rgba(0, 0, 0, 0.3)"});
                };

                // display the parsed figures
                _.keys(obj).forEach(function(item, index, list){
                    if (item != "people"){
                        var is_obj_empty = _.isEmpty(obj[item]);
                        if (is_obj_empty === false){
                            main_obj[item].forEach(function(key, index, list){
                                var has_data = _.has(obj[item], key);
                                if (has_data === false){
                                    obj[item][key] = [];
                                };
                            });
                            _.keys(obj[item]).forEach(function(value){
                                var data = obj[item][value];
                                if (data.length > 0){
                                    $("td#_" + value).html(data.length + " / " + obj.people.length + "<br />" + percentify(data.length / obj.people.length) + "%");
                                    $("td#_" + value).css({color: color});
                                    if (item === "years"){
                                        data.forEach(function(model){
                                            $("td#_" + value).append("<br /><hr></hr>" + "<u><a href = '" + model.attributes.incident_url + "' target='_blank'>" + model.attributes.district_attorney_file_number + "</a></u><br />" + "<a href = '/people/" + model.attributes.id + "/edit' target='_blank'>" + model.attributes.person_name + "</a>");
                                        });
                                    };
                                } else {
                                    $("td#_" + value).html("n-a" + "<br />" + "0.00%");
                                    $("td#_" + value).css({color: "rgba(0, 0, 0, 0.3)"});
                                };
                            });
                        } else {
                            main_obj[item].forEach(function(key, index, list){
                                var has_data = _.has(obj[item], key);
                                if (has_data === false){
                                    obj[item][key] = [];
                                };
                            });
                            _.keys(obj[item]).forEach(function(value){
                                var data = obj[item][value];
                                if (data.length > 0){
                                    $("td#_" + value).html(data.length + " / " + obj.people.length + "<br />" + percentify(data.length / obj.people.length) + "%");
                                    $("td#_" + value).css({color: color});
                                    if (item === "years"){
                                        data.forEach(function(model){
                                            $("td#_" + value).append("<br /><hr></hr>" + "<u><a href = '" + model.attributes.incident_url + "' target='_blank'>" + model.attributes.district_attorney_file_number + "</a></u><br />" + "<a href = '/people/" + model.attributes.id + "/edit' target='_blank'>" + model.attributes.person_name + "</a>");
                                        });
                                    };
                                } else {
                                    $("td#_" + value).html("n-a" + "<br />" + "0.00%");
                                    $("td#_" + value).css({color: "rgba(0, 0, 0, 0.3)"});
                                };
                            });
                        };
                    };
                });
            },

            construct_filtered_data: function(){
                this.view_object.obj.active_checkboxes = this.get_selected_filters();
                var all_filters = {};
                _.each(this.view_object.obj.active_checkboxes, function(item, index, list){
                    return all_filters[item] = true;
                });
                this.view_object.obj.filtered.people = new App.Collections.People();
                var all_filters_empty = _.isEmpty(this.view_object.obj.active_checkboxes);
                if (all_filters_empty === true){
                    this.view_object.obj.filtered.people = this.view_object.obj.init.people;
                } else {
                    this.view_object.obj.filtered.people.add(this.view_object.obj.init.people.where(all_filters));
                }
                this.view_object.obj.filtered.genders = create_groups(this.view_object.obj.filtered.people, "person_gender");
                this.view_object.obj.filtered.ethnicities = create_groups(this.view_object.obj.filtered.people, "person_ethnicity");
                this.view_object.obj.filtered.age_ranges = create_groups(this.view_object.obj.filtered.people, "age_ranges");
                this.view_object.obj.init.age_ranges = create_groups(this.view_object.obj.filtered.people, "age_ranges");
                this.view_object.obj.filtered.times = create_groups(this.view_object.obj.filtered.people, "time_of_day");
                this.view_object.obj.filtered.days = create_groups(this.view_object.obj.filtered.people, "incident_day");
                this.view_object.obj.filtered.months = create_groups(this.view_object.obj.filtered.people, "incident_month");
                this.view_object.obj.filtered.years = create_groups(this.view_object.obj.filtered.people, "incident_year");
                this.view_object.obj.filtered.responses = create_groups(this.view_object.obj.filtered.people, "led_to_response_category");
                this.view_object.obj.filtered.reasons = create_groups(this.view_object.obj.filtered.people, "reason_for_shooting");
                $("td#filtered-people").css({color: "red"});
                this.display_data(this.view_object.obj, false, "red");
            },

            get_selected_filters: function(){
                var filters = [];
                $("input:radio").each(function(){
                    var $this = $(this);
                    if($this.is(":checked")){
                        var filter_id = $this.attr("id");
                        var filter_type = $this.attr("class").split(" ")[0];
                        filters.push(filter_id);
                    };
                });
                $("input:checkbox").each(function(){
                    var $this = $(this);
                    if($this.is(":checked")){
                        var filter_id = $this.attr("id");
                        var filter_type = $this.attr("class");
                        filters.push(filter_id);
                    }
                });
                return filters;
            },

            clear_checkbox_filters: function(){
                $("input:radio").each(function(){
                    $(this).attr("checked", false);
                });
                $("input:checkbox").each(function(){
                    $(this).attr("checked", false);
                });
                this.render();
            },

            demo_filters: function(){
                $("input:checkbox[id^=person_killed]").attr("checked", true);
                $("input:checkbox[id^=person_unarmed]").attr("checked", true);
                $("input:checkbox[id^=multiple_officers]").attr("checked", true);
                this.construct_checkbox_filters();
            },
        });
    })();

    $(function(){
        window.app = new App.Router();
        Backbone.history.stop();
        Backbone.history.start({
            root: "/statistics",
            pushState: false,
        });
    });

</script>

<script id="my_template" type="text/template">
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <h5>Top Line Findings</h5>
            <ul>
                <@ _.each(top_line_stats, function(value, key){ @>
                    <@ var percent = toFixedPercent(value.length, obj.total); @>
                    <div class="col-xs-12 col-sm-6 col-md-4 col-lg-4">
                        <li><strong><@= key @></strong>:<br />&nbsp;&nbsp;<em><@= value.length @> people out of <@= obj.total @> (<@= percent @>%)</em></li>
                    </div>
                <@ }); @>
            </ul>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <@ _.each(filters, function(filter) { @>
                <hr></hr>
                <div class="row">
                    <div class="col-xs-6 col-sm-6 col-md-12 col-lg-12">
                        <div id="<@= filter.type @>" class="singlecol__one-fourth">
                            <form role="form" class="form-inline">
                                <fieldset>
                                    <legend class="form__legend"><@= filter.proper @></legend>
                                    <@ _.each(filter.radio_buttons, function(item){ @>
                                        <div class="radio field_name">
                                            <@ _.each(item.buttons, function(button){ @>
                                                <label class="radio-inline" for="<@= button.opt_field @>">
                                                    <input type="radio" class="<@= filter.type @>" id="<@= button.opt_field @>" name="<@= item.field_name @>" value="<@= button.opt @>"> <@= button.opt @>
                                                    <span><@= button.opt @></span>
                                                </label>
                                            <@ }); @>
                                        </div>
                                    <@ }); @>
                                    <@ _.each(filter.checkboxes, function(item){ @>
                                        <div class="checkbox col-xs-12 col-sm-6 col-md-4 col-lg-3">
                                            <label class="checkbox-inline" for="<@= item.opt_field @>"><@= item.opt @>
                                                <input type="checkbox" class="<@= filter.type @>" id="<@= item.opt_field @>" name="<@= item.opt_field @>" value="<@= item.opt_field @>">
                                            </label>
                                        </div>
                                    <@ }); @>
                                </fieldset>
                            </form>
                        </div>
                    </div>
                </div>
            <@ }); @>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <div class="btn-group" style="width: 100%; margin: 10px 0 10px 0;">
                <a id="clear-filters" class="btn btn-success btn-block" href="javascript:void(0)">Clear Filters</a>
            </div>
        </div>
    </div>
    <div id="table-container">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <h5 class="text-center">View statistics for people</h5>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <th style="text-align: center; width: 33.3%;">Total People</th>
                            <th style="text-align: center; width: 33.3%;">Filtered People</th>
                            <th style="text-align: center; width: 33.3%;">Relevant People</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td id="all-people" style="text-align: center; width: 33.3%;"></td>
                            <td style="text-align: center; width: 33.3%;"></td>
                            <td id="relevant-people" style="text-align: center; width: 33.3%;"></td>
                        </tr>
                        <tr>
                            <td style="text-align: center; width: 33.3%;"></td>
                            <td class="swap" id="filtered-people" style="text-align: center; width: 33.3%;"></td>
                            <td style="text-align: center; width: 33.3%;"></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <h6 class="text-center">Gender</h6>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <@ var gender_width = 100 / genders.length @>
                            <@ _.each(genders, function(gender){ @>
                                <th style="text-align: center; width: <@= gender_width @>%;"><@= gender @></th>
                            <@ }); @>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <@ _.each(genders, function(gender){ @>
                                <td class="swap" id="_<@= gender @>" style="text-align: center; width: <@= gender_width @>%;">--</td>
                            <@ }); @>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <h6 class="text-center">Ethnicity</h6>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <@ var ethnicity_width = 100 / ethnicities.length @>
                            <@ _.each(ethnicities, function(ethnicity){ @>
                                <@ if (ethnicity != undefined) { @>
                                    <th style="text-align: center; width: <@= ethnicity_width @>%;"><@= ethnicity @></th>
                                <@ } @>
                            <@ }); @>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <@ _.each(ethnicities, function(ethnicity){ @>
                                <@ if (ethnicity != undefined) { @>
                                    <td class="swap" id="_<@= ethnicity @>" style="text-align: center; width: <@= ethnicity_width @>%;">--</td>
                                <@ } @>
                            <@ }); @>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <h6 class="text-center">Ages</h6>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <@ var age_width = 100 / age_ranges.length @>
                            <@ _.each(age_ranges, function(age){ @>
                                <th style="text-align: center; width: <@= age_width @>%;"><@= age @></th>
                            <@ }); @>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                        <@ _.each(age_ranges, function(age){ @>
                            <td class="swap" id="_<@= age @>" style="text-align: center; width: <@= age_width @>%;">--</td>
                            <@ }); @>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <h6 class="text-center">Response Circumstances</h6>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <@ var response_width = 100 / responses.length @>
                            <@ _.each(responses, function(category){ @>
                                <th style="text-align: center; width: <@= response_width @>%;"><@= category.replace(/_/g," ") @></th>
                            <@ }); @>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                        <@ _.each(responses, function(category){ @>
                            <@ var div_id = category.replace(/ /g,"-"); @>
                            <td class="swap" id="_<@= div_id @>" style="text-align: center; width: <@= response_width @>%;">--</td>
                            <@ }); @>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <h6 class="text-center">Shooting Circumstances</h6>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <@ var reason_width = 100 / reasons.length @>
                            <@ _.each(reasons, function(category){ @>
                                <th style="text-align: center; width: <@= reason_width @>%;"><@= category.replace(/_/g," ") @></th>
                            <@ }); @>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                        <@ _.each(reasons, function(category){ @>
                            <@ var div_id = category.replace(/ /g,"_"); @>
                            <td class="swap" id="_<@= div_id @>" style="text-align: center; width: <@= reason_width @>%;">--</td>
                            <@ }); @>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <!--
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <h6 class="text-center">Time of Day</h6>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <@ var time_width = 100 / times.length @>
                            <@ _.each(times, function(time){ @>
                                <th style="text-align: center; width: <@= time_width @>%;"><@= time @></th>
                            <@ }); @>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <@ _.each(times, function(time){ @>
                                <td class="swap" id="_<@= time @>" style="text-align: center; width: <@= time_width @>%;">--</td>
                            <@ }); @>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-6">
                <h6 class="text-center">Day of the Week</h6>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <@ var day_width = 100 / days.length @>
                            <@ _.each(days, function(day){ @>
                                <th style="text-align: center; width: width: <@= day_width @>%;"><@= day @></th>
                            <@ }); @>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <@ _.each(days, function(day){ @>
                                <td class="swap" id="_<@= day @>" style="text-align: center; <@= day_width @>%;">--</td>
                            <@ }); @>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <h6 class="text-center">By Month</h6>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <@ var month_width = 100 / months.length @>
                            <@ _.each(months, function(month){ @>
                                <th style="text-align: center; width: <@= month_width @>%;"><@= month @></th>
                            <@ }); @>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <@ _.each(months, function(month){ @>
                                <td class="swap" id="_<@= month @>" style="text-align: center; width: <@= month_width @>%;">--</td>
                            <@ }); @>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        -->
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <h6 class="text-center">By Year</h6>
                <table class="kpcc-table">
                    <thead>
                        <tr>
                            <@ var year_width = 100 / years.length @>
                            <@ _.each(years, function(year){ @>
                                <th style="text-align: center; width: <@= year_width @>%;"><@= year @></th>
                            <@ }); @>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <@ _.each(years, function(year){ @>
                                <td class="swap" id="_<@= year @>" style="text-align: center; width: <@= year_width @>%;">--</td>
                            <@ }); @>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</script>
