<div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <ol class="breadcrumb">
            <li><%= link_to 'Home', controller: :home, action: :index %></li>
            <li>Incident Statistics</li>
        </ol>
    </div>
</div>

<div class="row data-filters"></div>
<script>
    (function(){

        window.App = {
            Models: {},
            Collections: {},
            Views: {},
            Router: {}
        };

        _.templateSettings = {
            interpolate: /\<\@\=(.+?)\@\>/gim,
            evaluate: /\<\@(.+?)\@\>/gim
        };

        window.template = function(id){
            return _.template( $('#' + id).html());
        };

        // helper functions
        window.percentify = function(value){
            var value = value * 100
            return parseFloat(value.toFixed(2));
        };

        window.toFixedPercent = function(part, whole){
            var targetValue = part / whole;
            var decimal = parseFloat(targetValue);
            return decimal
        };

        window.addCommas = function(nStr){
            nStr += "";
            x = nStr.split(".");
            x1 = x[0];
            x2 = x.length > 1 ? "." + x[1] : "";
                var rgx = /(\d+)(\d{3})/;
                    while (rgx.test(x1)) {
                        x1 = x1.replace(rgx, "$1" + "," + "$2");
                    }
                return x1 + x2;
        };

        window.ifEmptyStringForTotal = function(value){
            var result;
            if (value === ""){
                result = "Total not available";
            } else {
                result = window.addCommas(value);
            }
            return result;
        };

        window.string_equals_string = function(comparison, input){
            var result;
            if (input === comparison){
                result = true;
            } else {
                result = false;
            }
            return result;
        };

        window.parse_year = function(date_time){
            var output = moment(date_time).format("YYYY");
            output = parseInt(output);
            return output
        };

        String.prototype.truncateToGraf = function(){
            var lengthLimit = 900;
            if (this.length > lengthLimit){
                return this.substring(0, lengthLimit) + " ... ";
            } else {
                return this;
            }
        };

        String.prototype.toProperCase = function(){
            return this.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
        };

        App.Models.Incident = Backbone.Model.extend({
            defaults: {
                id: null,
                created_at: null,
                updated_at: null,
                url: null,
                civilian_name: null,
                district_attorney_file_number: null,
                district_attorney_county: null,
                district_attorney_prepared_report: null,
                general_location_of_incident: null,
                type_of_incident: null,
                civillian_weapon: null,
                officer_shots_fired: null,
                da_on_scene: null,
                da_investigator_on_scene: null,
                district_attorney_conclusion: null,
                narrative_notes: null,
                autopsy_notes: null,
                conclusion_notes: null,
                officer_name_and_badge_number: null,
                officer_police_agency: null,
                what_happened: null,
                underlying_crime_leading_to_shooting: null,
                how_situation_escalated: null,
                victim_case_number: null,
                officer_special_unit: null,
                officer_charges_filed_yes_detail: null,
                victim_charges_filed: null,
                date_of_incident: null,
                district_attorney_date_of_letter: null,
                verified: null,
                multiple_officers: null,
                car_stop: null,
                believed_civillian_armed: null,
                potential_police_video: null,
                potential_civillian_video: null,
                mention_of_waistband_in_report: null,
                fatal: null,
                case_relevant: null,
                victim_arrested: null,
                officer_charges_filed: null,
                officer_self_defense: null,
                officer_defense_of_civillians: null,
                officer_defense_of_officers: null,
                officer_unknown: null,
                officer_serving_warrant: null,
                officer_on_surveillance: null,
                officer_on_undercover: null,
                pursuit_occurred: null,
                victim_gang_member: null,
                victim_ignored_officer_commands: null,
                victim_weapon_recovered: null,
                victim_initiated_physical_threat: null,
                victim_intoxicated: null,
                victim_mentally_ill: null,
                civilian_witnesses: null,
                victim_fired_weapon: null,
                victim_pointed_weapon: null,
                officer_injured: null,
                flag_for_followup: null,
                victim_shot_in_back: null,
                applied_lawful_force: null,
                victim_shot_in_head: null,
                victim_unarmed: null,
                officer_couldnt_see_victims_hands: null,
                officer_routine_patrol: null,
                transcribed_count: null,
                officer_responding_to_call: null,
                grabbed_officers_weapon: null,
                email: null,
                civillian_weapon_specific: null,
                officer_shots_fired_specific: null,
                type_of_incident_number: null,
                coroner_case_number: null,
                in_custody_record_key_number: null,
            },
        });

        App.Models.Racial = Backbone.Model.extend({
            defaults: {
                // id: null,
                // districtattorneyfilenumber: null,
                // firstname: null,
                // lastname: null,
                dateofbirth: null,
                age: null,
                ethnicity: null,
                gender: null,
                dateofdeath: null,
                placeofdeath: null,
                manner: null,
            }
        });

        App.Collections.Racials = Backbone.Collection.extend({
            model: App.Models.Racial,
            // url: "/incidents/coroner-data"
            url: "/coroners_data.json"
        });

        App.Collections.Incidents = Backbone.Collection.extend({
            model: App.Models.Incident,
            comparator: function(model) {
                return model.get("civilian_name");
            }
        });

        App.Router = Backbone.Router.extend({

            routes: {
                "": "fetchData",
            },

            fetchData: function(){

                var _this = this;
                var applicationCollection = new App.Collections.Incidents(<%= raw @incidents.to_json %>);

                var coronerCollection = new App.Collections.Racials();
                coronerCollection.fetch({
                    async: true
                });

                var checkExist = setInterval(function() {
                    if (applicationCollection.length > 0 || coronerCollection.length > 0){
                        clearInterval(checkExist);
                        _this.renderApplicationVisuals(applicationCollection, coronerCollection);
                    }
                }, 500);
            },

            renderApplicationVisuals: function(applicationCollection, coronerCollection){
                if (this.applicationVisuals){
                    this.applicationVisuals.remove();
                };
                this.applicationVisuals = new App.Views.ApplicationVisuals({
                    total_incidents: applicationCollection,
                    demographic_data: coronerCollection,
                    container: ".data-filters"
                });
                return this.applicationVisuals;
            },
        });

        App.Views.ApplicationVisuals = Backbone.View.extend({

            // tagName: "div",

            // className: "col-xs-12 col-sm-12 col-md-12 col-lg-12",

            el: ".data-filters",

            initialize: function(object){

                this.view_object = object;

                this.view_object.template = template("my_template");

                this.view_object.total_incidents = this.calculate_data_fields(this.view_object.total_incidents, this.view_object.demographic_data);

                this.view_object.relevant_incidents = new App.Collections.Incidents(
                    this.view_object.total_incidents.where({
                        case_relevant: true
                    })
                );

                this.view_object.years = _.uniq(this.view_object.relevant_incidents.pluck("year_of_incident")).sort();

                this.view_object.genders = _.uniq(this.view_object.relevant_incidents.pluck("gender")).sort();

                this.view_object.ethnicities = _.uniq(this.view_object.relevant_incidents.pluck("ethnicity")).sort();

                this.view_object.filters = [{
                    type: "Top Line Data",
                    filters: [
                        {proper: "Was Use Of Force Fatal", field: "fatal"},
                        {proper: "Victim Was Unarmed", field: "victim_unarmed"},
                        {proper: "Victim Armed With Firearm/Gun", field: "victim_unarmed"},
                        {proper: "Victim Fired Weapon", field: "victim_fired_weapon"},
                        {proper: "Victim Weapon Recovered", field: "victim_weapon_recovered"},
                        {proper: "Victim Ignored Officer Commands", field: "victim_ignored_officer_commands"},
                        {proper: "Mention Of Waistband", field: "mention_of_waistband_in_report"},
                        {proper: "Mention Of Couldn't See Victims Hands", field: "officer_couldnt_see_victims_hands"},
                    ]
                }, {
                    type: "Officer Filters",
                    filters: [
                        {proper: "Officer Self Defense", field: "officer_self_defense"},
                        {proper: "Officer Defense Of Officers", field: "officer_defense_of_officers"},
                        {proper: "Officer Defense Of Civillians", field: "officer_defense_of_civillians"},
                        {proper: "Officer Responding to Call", field: "officer_responding_to_call"},
                        {proper: "Officer On Routine Patrol", field: "officer_routine_patrol"},
                        {proper: "Officer Serving Warrant", field: "officer_serving_warrant"},
                        {proper: "Officer On Surveillance", field: "officer_on_surveillance"},
                        {proper: "Officer On Undercover", field: "officer_on_undercover"},
                        {proper: "Charges Filed Against Officer", field: "officer_charges_filed"},
                    ]
                }, {
                    type: "Victim Filters",
                    filters: [
                        {proper: "Victim Arrested", field: "victim_arrested"},
                        {proper: "Victim Identified As Gang Member", field: "victim_gang_member"},
                        {proper: "Mention Of Victim Intoxication", field: "victim_intoxicated"},
                        {proper: "Mention Of Victim Mental Illness", field: "victim_mentally_ill"},
                    ]
                }, {
                    type: "Incident Filters",
                    filters: [
                        {proper: "Car Stop", field: "car_stop"},
                        {proper: "Pursuit Occurred", field: "pursuit_occurred"},
                        {proper: "Multiple Officers Involved", field: "multiple_officers"},
                        {proper: "Victim Grabbed Officers Weapon", field: "grabbed_officers_weapon"},
                        {proper: "Believed Victim Was Armed", field: "believed_civillian_armed"},
                        {proper: "Officer Injured", field: "officer_injured"},
                        {proper: "Victim Initiated Physical Threat", field: "victim_initiated_physical_threat"},
                        {proper: "Victim Pointed Weapon", field: "victim_pointed_weapon"},
                        {proper: "Victim Shot In Back", field: "victim_shot_in_back"},
                        {proper: "Victim Shot In Head", field: "victim_shot_in_head"},
                        {proper: "Potential Civillian Video", field: "potential_civillian_video"},
                        {proper: "Civilian Witnesses", field: "civilian_witnesses"},
                    ]
                }];

                this.render()

            },

            calculate_data_fields: function(total_incidents, demographic_data){

                total_incidents.forEach(function(model, index){

                    var _this = model.attributes;

                    model.set("full_name", _this.civilian_name);

                    model.set("year_of_incident", parse_year(_this.date_of_incident));

                    if (_this.da_on_scene != null && _this.district_attorney_prepared_report != null){
                        model.set("da_the_same", string_equals_string(_this.da_on_scene, _this.district_attorney_prepared_report));
                    } else {
                        model.set("da_the_same", null);
                    }

                    /* try to set the demographic data */
                    var demographics = demographic_data.where({
                        districtattorneyfilenumber: _this.district_attorney_file_number
                    });

                    if (demographics.length > 0){
                        model.set(demographics[0].attributes);
                    }

                    if (_this.ethnicity === undefined){
                        model.set("ethnicity", "na");
                    } else if (_this.ethnicity === null){
                        model.set("ethnicity", "na");
                    } else if (_this.ethnicity === ""){
                        model.set("ethnicity", "na");
                    } else if (_this.ethnicity === "HISPANIC/LATIN AMERICAN"){
                        model.set("ethnicity", "HISPANIC");
                    } else if (_this.ethnicity === "MIDDLE EASTERN"){
                        model.set("ethnicity", "MIDDLE-EASTERN");
                    };

                    if (_this.gender === undefined){
                        model.set("gender", "na");
                    } else if (_this.gender === "MALE"){
                        model.set("gender", "male");
                        model.set("male", true);
                    } else if (_this.gender === "FEMALE"){
                        model.set("gender", "female");
                        model.set("female", true);
                    };

                    model.set("armed_with_firearm", false)

                    if (_this.civillian_weapon != null){

                        var array_of_weapons = [
                            "assault weapon",
                            "handgun",
                            "firearm",
                            "officer's weapon",
                            "shotgun",
                            "rifle",
                        ];

                        var length = array_of_weapons.length;

                        while(length--){
                            if (_this.civillian_weapon.indexOf(array_of_weapons[length]) != -1){
                                model.set("armed_with_firearm", true)
                            }
                        }

                    };

                    if (_this.armed_with_firearm === false){
                        console.log(_this.civillian_weapon + " - " + _this.armed_with_firearm);
                    };


                });

                return total_incidents;

            },

            events: {
                "click [type='checkbox']": "construct_checkbox_filters",
                "click #clear-filters": "clear_checkbox_filters",
                "click #demo-filters": "demo_filters"
            },

            render: function(){
                var data = this.view_object.relevant_incidents;
                $(this.view_object.container).html(this.view_object.template({
                    years: this.view_object.years,
                    filters: this.view_object.filters,
                    genders: this.view_object.genders,
                    ethnicities: this.view_object.ethnicities,
                }));
                this.construct_checkbox_filters();
            },

            construct_checkbox_filters: function(){

                var obj_filter = {};

                obj_filter.active_checkboxes = [];

                obj_filter.relevant_incidents = this.view_object.relevant_incidents;

                obj_filter.relevant_scope = obj_filter.relevant_incidents.length;

                obj_filter.total_incidents = this.view_object.total_incidents;

                obj_filter.ethnic_data = this.view_object.ethnicities;

                obj_filter.ethnic_group = this.view_object.relevant_incidents.groupBy(function(model){
                    return model.get("ethnicity");
                });

                obj_filter.gender_data = this.view_object.genders;

                obj_filter.gender_group = this.view_object.relevant_incidents.groupBy(function(model){
                    return model.get("gender");
                });

                obj_filter.yearly_data = this.view_object.years;

                obj_filter.yearly_group = this.view_object.relevant_incidents.groupBy(function(model){
                    return model.get("year_of_incident");
                });

                if (!$("input:checkbox").is(":checked")) {

                    /* calculate overall statistics */
                    $("td#all-incidents").html(obj_filter.total_incidents.length);
                    $("td#relevant-incidents").html(obj_filter.relevant_incidents.length);

                    this.present_table_data(obj_filter, "initial", null)
                    this.present_table_data(obj_filter, "yearly", "_group")
                    this.present_table_data(obj_filter, "gender", "initial")
                    this.present_table_data(obj_filter, "ethnic", "initial")

                    /* change the color scheme on the table */
                    $(".kpcc-table td.swap").css({color: "black"});

                } else {

                    $("input:checkbox").each(function(){
                        var $this = $(this);
                        if($this.is(":checked")){
                            var filter_id = $this.attr("id");
                            obj_filter.active_checkboxes.push(filter_id);
                        }
                    });

                    obj_filter.selected_filters = {};

                    _.each(obj_filter.active_checkboxes, function(key){
                        obj_filter.selected_filters[key] = true;
                    });

                    /* apply filters to relevant data */
                    obj_filter.filtered_data = new App.Collections.Incidents(
                        obj_filter.relevant_incidents.where(obj_filter.selected_filters)
                    );

                    /* adjust scope due to filters */
                    obj_filter.relevant_scope = obj_filter.filtered_data.length;

                    /* apply filters to get gender data */
                    obj_filter.gender_filtered = obj_filter.filtered_data.groupBy(function(model){
                        return model.get("gender");
                    });

                    /* apply filters to get gender data */
                    obj_filter.ethnic_filtered = obj_filter.filtered_data.groupBy(function(model){
                        return model.get("ethnicity");
                    });

                    /* apply filters to get year by year data */
                    obj_filter.yearly_filtered = obj_filter.filtered_data.groupBy(function(model){
                        return model.get("year_of_incident");
                    });

                    this.present_table_data(obj_filter, "overall", null)
                    this.present_table_data(obj_filter, "yearly", "_filtered")

                    var is_fatal_checked = _.has(obj_filter.selected_filters, "fatal");
                    if (is_fatal_checked === true){
                        this.present_table_data(obj_filter, "gender", "_filtered")
                        this.present_table_data(obj_filter, "ethnic", "_filtered")
                    };

                    /* change the color scheme on the table */
                    $(".kpcc-table td.swap").css({color: "red"});
                }
            },

            present_table_data: function(obj_filter, category, scope){
                if (category === "initial"){
                    $("td#filtered-display").html(obj_filter.relevant_incidents.length + " of " + obj_filter.relevant_incidents.length + " <br /> " + percentify(obj_filter.relevant_incidents.length / obj_filter.relevant_scope) + "%");
                } else if (category === "overall"){
                    if (obj_filter.filtered_data.length){
                        $("td#filtered-display").html(obj_filter.filtered_data.length + " of " + obj_filter.relevant_incidents.length + " <br /> " + percentify(obj_filter.filtered_data.length / obj_filter.relevant_incidents.length) + "%");
                    } else {
                        $("td#filtered-display").html("No Results Found");
                    };
                } else {
                    if (scope === "initial"){
                        obj_filter[category + "_data"].forEach(function(item){
                            $("td#_" + item).html("--");
                        });
                    } else {
                        obj_filter[category + "_data"].forEach(function(item){
                            if (obj_filter[category + scope][item] === undefined){
                                $("td#_" + item).html("No Results Found");
                            } else {
                                $("td#_" + item).html(obj_filter[category + scope][item].length + " of " + obj_filter.relevant_scope + " <br /> " + percentify(obj_filter[category + scope][item].length / obj_filter.relevant_scope) + "%");
                                if (category === "yearly"){
                                    obj_filter[category + scope][item].forEach(function(model){
                                        $("td#_" + item).append("<br /><hr></hr>" + "<a href = '" + model.attributes.url + "' target='_blank'>" + model.attributes.civilian_name + "</a>");
                                    });
                                }
                            };
                        });
                    };
                };
            },

            clear_checkbox_filters: function(){
                $("input:checkbox").each(function(){
                    $(this).attr("checked", false);
                });
                this.construct_checkbox_filters();
            },

            demo_filters: function(){
                $("input:checkbox[id^=fatal]").attr("checked", true);
                $("input:checkbox[id^=victim_unarmed]").attr("checked", true);
                $("input:checkbox[id^=multiple_officers]").attr("checked", true);
                this.construct_checkbox_filters();
            },

        });

    })();

    $(function(){
        window.app = new App.Router();
        Backbone.history.start({
            root: "/incidents",
            pushState: false,
        });
    });

</script>

<script id="my_template" type="text/template">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <p>This tool provides a series of true/false filters that allows you to explore the Use of Force Data we have transcribed. The data is based on declination memos that are filed by the Los Angeles District Attorney's Office after Use of Force cases. The declination memos were filed between Jan. 1, 2010 to March 30, 2015.</p>
                <p>This data only shows the number of Use of Force cases reviewed by the Los Angeles District Attorney's Office in that timeframe. It is not the total number of cases.</p>
                <p>Use any combination of filters to ask questions of the data, see the results by year, and get links to the cases relevant to your query.</p>
                <p><strong>An example</strong>: Lets say I wanted to see all <em>Fatal incidents</em> in which the <em>Victim Was Unarmed</em> and there were <em>Multiple Officers Involved</em>. Well, you would check the <a id="demo-filters" href="javascript:void(0)">appropriate boxes</a>.</p>
                <form role="form" class="form-inline">
                    <@ _.each(filters, function(filter) { @>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <h5><@= filter.type @></h5>
                                <@ _.each(filter.filters, function(checkbox) { @>
                                    <div class="checkbox col-xs-12 col-sm-6 col-md-4 col-lg-3">
                                        <label class="checkbox-inline" for="<@= checkbox @>">
                                            <input type="checkbox" id="<@= checkbox.field @>" value="<@= checkbox.field @>"> <@= checkbox.proper @>
                                        </label>
                                    </div>
                                <@ }); @>
                            </div>
                        </div>
                    <@ }); @>
                </form>
            </div>
        </div>
        <hr></hr>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="btn-group" style="width: 100%; margin: 10px 0 10px 0;">
                    <a id="clear-filters" class="btn btn-success btn-block" href="javascript:void(0)">Clear Filters</a>
                </div>
                <div id="table-container">
                    <table class="kpcc-table">
                        <thead>
                            <tr>
                                <th style="text-align: center; width: 50%;">Incidents</th>
                                <th style="text-align: center; width: 50%;">On-duty use-of-force incidents</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td id="all-incidents" style="text-align: center; width: 50%;"></td>
                                <td id="relevant-incidents" style="text-align: center; width: 50%;"></td>
                            </tr>
                        </tbody>
                    </table>
                    <table class="kpcc-table">
                        <thead>
                            <tr>
                                <th style="text-align: center; width: 100%;">Relevant Incidents Matching</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="swap" id="filtered-display" style="text-align: center; width: 50%;"></td>
                            </tr>
                        </tbody>
                    </table>
                    <table class="kpcc-table">
                        <thead>
                            <tr>
                                <@ _.each(genders, function(gender) { @>
                                    <th style="text-align: center; width: 20%;"><@= gender @> Cases</th>
                                <@ }); @>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <@ _.each(genders, function(gender) { @>
                                    <td class="swap" id="_<@= gender @>" style="text-align: center; width: 20%;">--</td>
                                <@ }); @>
                            </tr>
                        </tbody>
                    </table>
                    <table class="kpcc-table">
                        <thead>
                            <tr>
                                <@ var width = 100 / ethnicities.length @>
                                <@ _.each(ethnicities, function(ethnicity) { @>
                                    <th style="text-align: center; width: <@= width @>%;"><@= ethnicity @> Cases</th>
                                <@ }); @>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <@ _.each(ethnicities, function(ethnicity) { @>
                                    <td class="swap" id="_<@= ethnicity @>" style="text-align: center; width: <@= width @>%;">--</td>
                                <@ }); @>
                            </tr>
                        </tbody>
                    </table>
                    <table class="kpcc-table">
                        <thead>
                            <tr>
                                <@ _.each(years, function(year) { @>
                                    <th style="text-align: center; width: 20%;"><@= year @> Cases Reviewed</th>
                                <@ }); @>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <@ _.each(years, function(year) { @>
                                    <td class="swap" id="_<@= year @>" style="text-align: center; width: 20%;">--</td>
                                <@ }); @>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</script>
