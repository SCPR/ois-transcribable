<div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <ol class="breadcrumb">
            <li><%= link_to 'Home', controller: :home, action: :index %></li>
            <li>Incident Statistics</li>
        </ol>
    </div>
</div>

<div class="row data-filters"></div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min.js"></script>
<script src="http://projects.scpr.org/static-files/v3-dependencies/scripts/underscore-min.js"></script>
<script src="http://projects.scpr.org/static-files/v3-dependencies/scripts/backbone-min-v1.0.js"></script>
<script>

    (function(){

         _.templateSettings = {
            interpolate: /\<\@\=(.+?)\@\>/gim,
            evaluate: /\<\@(.+?)\@\>/gim
        };

        window.App = {
            Models: {},
            Collections: {},
            Views: {},
            Router: {}
        };

        window.template = function(id){
            return _.template( $('#' + id).html());
        };

        App.Views.ApplicationWrapper = Backbone.View.extend({
            el: "body",
            initialize: function(){
                this.render();
            },
            render: function(){
            }
        });

        $(function(){
            window.app = new App.Router();
            Backbone.history.start({
                root: "http://127.0.0.1:3000/incidents",
                pushState: false,
            });
        });

        // helper functions
        window.percentifyValue = function(value){
            var value = value * 100
            return parseFloat(value.toFixed(2));
        };

        window.toFixedPercent = function(part, whole){
            var targetValue = part / whole;
            var decimal = parseFloat(targetValue);
            return decimal
        };

        window.addCommas = function(nStr){
            nStr += "";
            x = nStr.split(".");
            x1 = x[0];
            x2 = x.length > 1 ? "." + x[1] : "";
                var rgx = /(\d+)(\d{3})/;
                    while (rgx.test(x1)) {
                        x1 = x1.replace(rgx, "$1" + "," + "$2");
                    }
                return x1 + x2;
        };

        window.ifEmptyStringForTotal = function(value){
            var result;
            if (value === ""){
                result = "Total not available";
            } else {
                result = window.addCommas(value);
            }
            return result;
        };

        window.string_equals_string = function(comparison, input){
            var result;
            if (input === comparison){
                result = true;
            } else {
                result = false;
            }
            return result;
        };

        window.parse_year = function(date_time){
            var output = moment(date_time).format("YYYY");
            output = parseInt(output);
            return output
        };

        String.prototype.truncateToGraf = function(){
            var lengthLimit = 900;
            if (this.length > lengthLimit){
                return this.substring(0, lengthLimit) + " ... ";
            } else {
                return this;
            }
        };

        String.prototype.toProperCase = function(){
            return this.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
        };

    })();

    App.Models.Incident = Backbone.Model.extend({
        defaults: {
            url: null,
            civilian_name: null,
            district_attorney_file_number: null,
            type_of_incident: null,
        },
    });

    App.Collections.Incidents = Backbone.Collection.extend({
        model: App.Models.Incident,
    });


    App.Router = Backbone.Router.extend({
        initialize: function(){
            this.fetchData();
        },

        routes: {
            // "": "fetchData",
        },

        fetchData: function(){
            var _this = this;
            var applicationCollection = new App.Collections.Incidents(<%= raw @incidents.to_json %>);
            var checkExist = setInterval(function() {
                if (applicationCollection.length > 0){
                    clearInterval(checkExist);
                    _this.renderApplicationVisuals(applicationCollection);
                }
            }, 500);
        },

        renderApplicationVisuals: function(collection){
            if (this.applicationVisuals){
                this.applicationVisuals.remove();
            };
            this.applicationVisuals = new App.Views.ApplicationVisuals({
                total_incidents: collection,
                container: ".data-filters"
            });
            return this.applicationVisuals;
        },
    });

    App.Views.ApplicationVisuals = Backbone.View.extend({

        // tagName: "div",
        // className: "col-xs-12 col-sm-12 col-md-12 col-lg-12",

        el: ".data-filters",

        initialize: function(object){
            this.view_object = object;

            this.view_object.template = template("my_template");

            this.view_object.total_incidents = this.calculate_data_fields(this.view_object.total_incidents);

            this.view_object.relevant_incidents = new App.Collections.Incidents(
                this.view_object.total_incidents.where({
                    case_relevant: true
                })
            );

            this.view_object.years = _.uniq(this.view_object.relevant_incidents.pluck("year_of_incident")).sort();

            this.view_object.filters = [{
                type: "Top Line Data",
                filters: [
                    {proper: "Was Use Of Force Fatal", field: "fatal"},
                    {proper: "Victim Was Unarmed", field: "victim_unarmed"},
                    {proper: "Victim Fired Weapon", field: "victim_fired_weapon"},
                    {proper: "Victim Weapon Recovered", field: "victim_weapon_recovered"},
                    {proper: "Victim Ignored Officer Commands", field: "victim_ignored_officer_commands"},
                    {proper: "Mention Of Waistband", field: "mention_of_waistband_in_report"},
                    {proper: "Mention Of Couldn't See Victims Hands", field: "officer_couldnt_see_victims_hands"},
                ]
            }, {
                type: "Officer Filters",
                filters: [
                    {proper: "Officer Self Defense", field: "officer_self_defense"},
                    {proper: "Officer Defense Of Officers", field: "officer_defense_of_officers"},
                    {proper: "Officer Defense Of Civillians", field: "officer_defense_of_civillians"},
                    {proper: "Officer Responding to Call", field: "officer_responding_to_call"},
                    {proper: "Officer On Routine Patrol", field: "officer_routine_patrol"},
                    {proper: "Officer Serving Warrant", field: "officer_serving_warrant"},
                    {proper: "Officer On Surveillance", field: "officer_on_surveillance"},
                    {proper: "Officer On Undercover", field: "officer_on_undercover"},
                    {proper: "Charges Filed Against Officer", field: "officer_charges_filed"},
                    // {proper: "Officer Applied Lawful Force", field: "applied_lawful_force"},
                ]
            }, {
                type: "Victim Filters",
                filters: [
                    {proper: "Victim Arrested", field: "victim_arrested"},
                    {proper: "Victim Identified As Gang Member", field: "victim_gang_member"},
                    {proper: "Mention Of Victim Intoxication", field: "victim_intoxicated"},
                    {proper: "Mention Of Victim Mental Illness", field: "victim_mentally_ill"},
                ]
            }, {
                type: "Incident Filters",
                filters: [
                    {proper: "Car Stop", field: "car_stop"},
                    {proper: "Pursuit Occurred", field: "pursuit_occurred"},
                    {proper: "Multiple Officers Involved", field: "multiple_officers"},
                    {proper: "Victim Grabbed Officers Weapon", field: "grabbed_officers_weapon"},
                    {proper: "Believed Victim Was Armed", field: "believed_civillian_armed"},
                    {proper: "Officer Injured", field: "officer_injured"},
                    {proper: "Victim Initiated Physical Threat", field: "victim_initiated_physical_threat"},
                    {proper: "Victim Pointed Weapon", field: "victim_pointed_weapon"},
                    {proper: "Victim Shot In Back", field: "victim_shot_in_back"},
                    {proper: "Victim Shot In Head", field: "victim_shot_in_head"},
                    // {proper: "Flag For Followup", field: "flag_for_followup"},
                    // {proper: "On-scene DA Also Filed Report", field: "da_the_same"},
                    // {proper: "Potential Police Video", field: "potential_police_video"},
                    {proper: "Potential Civillian Video", field: "potential_civillian_video"},
                    {proper: "Civilian Witnesses", field: "civilian_witnesses"},
                ]
            }];

            this.render()

        },

        calculate_data_fields: function(collection){

            collection.forEach(function(model, index) {

                var _this = model.attributes;

                model.set("full_name", _this.civilian_name);

                model.set("year_of_incident", parse_year(_this.date_of_incident));

                if (_this.da_on_scene != null && _this.district_attorney_prepared_report != null){
                    model.set("da_the_same", string_equals_string(_this.da_on_scene, _this.district_attorney_prepared_report));
                } else {
                    model.set("da_the_same", null);
                }

            });

            return collection;

        },

        events: {
            "click [type='checkbox']": "construct_checkbox_filters",
        },

        render: function(){

            var data = this.view_object.relevant_incidents;

            $(this.view_object.container).html(this.view_object.template({

                years: this.view_object.years,

                filters: this.view_object.filters,

                // models: [{
                //     models_field: "Relevant incidents",
                //     models_length: data.where({
                //         case_relevant: true
                //     }).length
                // }, {
                //     models_field: "Fatal incidents",
                //     models_length: data.where({
                //         fatal: true
                //     }).length
                // }, {
                //     models_field: "Victim Unarmed",
                //     models_length: data.where({
                //         victim_unarmed: true
                //     }).length
                // }, {
                //     models_field: "Mentally Ill",
                //     models_length: data.where({
                //         victim_mentally_ill: true
                //     }).length
                // }, {
                //     models_field: "Mentally Ill And Unarmed",
                //     models_length: data.where({
                //         victim_unarmed: true,
                //         victim_mentally_ill: true
                //     }).length
                // }, {
                //     models_field: "Reaching For Waistband And Unarmed",
                //     models_length: data.where({
                //         victim_unarmed: true,
                //         mention_of_waistband_in_report: true
                //     }).length
                // }, {
                //     models_field: "Pointed Firearm At An Officer",
                //     models_length: data.where({
                //         victim_pointed_weapon: true
                //     }).length
                // }, {
                //     models_field: "Fired Firearm At An Officer",
                //     models_length: data.where({
                //         victim_fired_weapon: true
                //     }).length
                // }, {
                //     models_field: "Pointed and Fired Firearm At An Officer",
                //     models_length: data.where({
                //         victim_pointed_weapon: true,
                //         victim_fired_weapon: true
                //     }).length
                // }, {
                //     models_field: "Reason was 'defense of civilians'",
                //     models_length: data.where({
                //         officer_defense_of_civillians: true
                //     }).length
                // }, {
                //     models_field: "Couldn't See Victims Hands",
                //     models_length: data.where({
                //         officer_couldnt_see_victims_hands: true
                //     }).length
                // }, {
                //     models_field: "Responding Prosecutor Did Not Complete The Report",
                //     models_length: data.where({
                //         da_the_same: false
                //     }).length
                // }, {
                //     models_field: "Ignored Commands And Demonstrated Symptoms Of Mentally Illness",
                //     models_length: data.where({
                //         victim_mentally_ill: true,
                //         victim_ignored_officer_commands: true,
                //     }).length
                // }, {
                //     models_field: "Ignored Commands And Demonstrated Symptoms Of Intoxication",
                //     models_length: data.where({
                //         victim_intoxicated: true,
                //         victim_ignored_officer_commands: true,
                //     }).length
                // }],

                // incidents: data.toJSON()

            }));

            this.construct_checkbox_filters();
        },

        construct_checkbox_filters: function(){
            var active_checkboxes = [];

            if (!$("input:checkbox").is(":checked")) {

                $("td#all-incidents").html(this.view_object.total_incidents.length);

                $("td#relevant-incidents").html(this.view_object.relevant_incidents.length);

                $("td#filtered-display").html(this.view_object.relevant_incidents.length);

                var data = this.view_object.relevant_incidents.groupBy(function(model){
                    return model.get("year_of_incident");
                });

                this.view_object.years.forEach(function(item){
                    $("td#_" + item).html(data[item].length);
                });

                $(".kpcc-table td.swap").css({color: "black"});

            } else {

                $("input:checkbox").each(function(){
                    var $this = $(this);
                    if($this.is(":checked")){
                        var filter_id = $this.attr("id");
                        active_checkboxes.push(filter_id);
                    }
                });

                var filters = {};

                _.each(active_checkboxes, function(key){
                    filters[key] = true;
                });

                var filtered_data = new App.Collections.Incidents(
                    this.view_object.relevant_incidents.where(filters)
                );

                if (filtered_data.length){
                    $("td#filtered-display").html(filtered_data.length);
                } else {
                    $("td#filtered-display").html("No Results Found");
                };

                var yearly_data = filtered_data.groupBy(function(model){
                    return model.get("year_of_incident");
                });

                var number_of_results = _.keys(yearly_data);

                this.view_object.years.forEach(function(item){
                    if (yearly_data[item] === undefined){
                        $("td#_" + item).html("No Results Found");
                    } else {

                        $("td#_" + item).html(yearly_data[item].length);

                        yearly_data[item].forEach(function(model){
                            $("td#_" + item).append("<br /><hr></hr>" + "<a href = '" + model.attributes.url + "' target='_blank'>" + model.attributes.civilian_name + "</a>");
                        });

                    };
                });

                $(".kpcc-table td.swap").css({color: "red"});

            }
        },
    });
</script>

<script id="my_template" type="text/template">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <form role="form" class="form-inline">
                    <@ _.each(filters, function(filter) { @>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <h5><@= filter.type @></h5>
                                <@ _.each(filter.filters, function(checkbox) { @>
                                    <div class="checkbox col-xs-12 col-sm-6 col-md-4 col-lg-3">
                                        <label class="checkbox-inline" for="<@= checkbox @>">
                                            <input type="checkbox" id="<@= checkbox.field @>" value="<@= checkbox.field @>"> <@= checkbox.proper @>
                                        </label>
                                    </div>
                                <@ }); @>
                            </div>
                        </div>
                    <@ }); @>
                </form>
            </div>
        </div>
        <hr></hr>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div id="table-container">
                    <table class="kpcc-table">
                        <thead>
                            <tr>
                                <th style="text-align: center; width: 50%;">Incidents</th>
                                <th style="text-align: center; width: 50%;">On-duty use-of-force incidents</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td id="all-incidents" style="text-align: center; width: 50%;"></td>
                                <td id="relevant-incidents" style="text-align: center; width: 50%;"></td>
                            </tr>
                        </tbody>
                    </table>
                    <table class="kpcc-table">
                        <thead>
                            <tr>
                                <th style="text-align: center; width: 100%;">Incidents Matching</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="swap" id="filtered-display" style="text-align: center; width: 50%;"></td>
                            </tr>
                        </tbody>
                    </table>
                    <table class="kpcc-table">
                        <thead>
                            <tr>
                                <@ _.each(years, function(year) { @>
                                    <th style="text-align: center; width: 20%;"><@= year @></th>
                                <@ }); @>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <@ _.each(years, function(year) { @>
                                    <td class="swap" id="_<@= year @>" style="text-align: center; width: 20%;">--</td>
                                <@ }); @>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</script>
